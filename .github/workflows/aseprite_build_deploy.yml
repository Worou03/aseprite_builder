name: Build Aseprite (Windows only)

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *' # 每天 00:00 自动检查
  push:
    branches:
      - master
      - fix

env:
  BUILD_TYPE: Release

jobs:
  check-version:
    name: Check latest Aseprite release
    runs-on: ubuntu-latest
    outputs:
      latest_tag: ${{ steps.version_info.outputs.latest_tag }}
      download_url: ${{ steps.version_info.outputs.download_url }}
      should_build: ${{ steps.should_build.outputs.should_build }}
    steps:
      - name: Get latest Aseprite release info
        id: version_info
        run: |
          data=$(curl -sL https://api.github.com/repos/aseprite/aseprite/releases/latest)
          LATEST_TAG=$(echo "${data}" | jq -r '.tag_name')
          DOWNLOAD_URL=$(echo "${data}" | jq -r '.tarball_url')

          echo "latest_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT
          echo "download_url=${DOWNLOAD_URL}" >> $GITHUB_OUTPUT

      - name: Load version from cache
        id: version_check
        uses: actions/cache@v3
        with:
          path: version.txt
          key: version-${{ steps.version_info.outputs.latest_tag }}

      - name: Decide whether to build
        id: should_build
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" || "${{ github.ref }}" == "refs/heads/fix" || "${{ steps.version_check.outputs.cache-hit }}" != "true" ]]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "${{ steps.version_info.outputs.latest_tag }}" > version.txt
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi

  build-aseprite:
    name: Build on Windows
    needs: check-version
    if: ${{ needs.check-version.outputs.should_build == 'true' }}
    runs-on: windows-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install Ninja
        uses: seanmiddleditch/gha-setup-ninja@v3

      - name: Clean OpenSSL from PATH (optional)
        shell: pwsh
        run: |
          if (Test-Path "C:\Program Files\OpenSSL") {
            Remove-Item -Recurse -Force "C:\Program Files\OpenSSL" -ErrorAction SilentlyContinue
          }

      - name: Download Skia (m124)
        run: |
          curl -L -o skia.zip https://github.com/aseprite/skia/releases/download/m124-08a5439a6b/Skia-Windows-Release-x64.zip
          mkdir skia
          tar -xf skia.zip -C skia

      - name: Download Aseprite source
        run: |
          curl -L -o aseprite.tar.gz ${{ needs.check-version.outputs.download_url }}
          tar -xzf aseprite.tar.gz
          mv aseprite-* aseprite
          mkdir aseprite/build

      - name: Setup VS2022 environment
        uses: seanmiddleditch/gha-setup-vsdevenv@v4

      - name: Configure with CMake
        working-directory: aseprite/build
        shell: pwsh
        run: |
          cmake -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} `
            -DLAF_BACKEND=skia `
            -DSKIA_DIR="$(Convert-Path ../../skia)" `
            -DSKIA_LIBRARY_DIR="$(Convert-Path ../../skia/out/Release-x64)" `
            -DSKIA_LIBRARY="$(Convert-Path ../../skia/out/Release-x64/skia.lib)" `
            -G Ninja ..

      - name: Build with Ninja
        working-directory: aseprite/build
        run: ninja aseprite

      - name: Make portable
        working-directory: aseprite/build/bin
        run: echo '# Portable mode' > aseprite.ini

      - name: Create zip
        working-directory: aseprite/build/bin
        run: 7z -tzip a Aseprite-${{ needs.check-version.outputs.latest_tag }}-Windows.zip *

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: Aseprite-${{ needs.check-version.outputs.latest_tag }}-Windows
          path: aseprite/build/bin/Aseprite-${{ needs.check-version.outputs.latest_tag }}-Windows.zip
